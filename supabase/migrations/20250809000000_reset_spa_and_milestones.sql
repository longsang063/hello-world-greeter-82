-- =============================================
-- SABO POOL ARENA - SPA SYSTEM RESET & MILESTONES
-- Reset t·∫•t c·∫£ ƒëi·ªÉm SPA v·ªÅ 0 v√† t·∫°o h·ªá th·ªëng milestone m·ªõi
-- =============================================

-- B∆Ø·ªöC 1: Reset t·∫•t c·∫£ ƒëi·ªÉm SPA v·ªÅ 0
UPDATE public.player_rankings 
SET spa_points = 0, 
    updated_at = NOW()
WHERE spa_points > 0;

-- Reset wallet points_balance v·ªÅ 0
UPDATE public.wallets 
SET points_balance = 0, 
    updated_at = NOW()
WHERE points_balance > 0;

-- T·∫°o log ƒë·ªÉ ghi nh·∫≠n vi·ªác reset
INSERT INTO public.spa_points_log (user_id, points, category, description, created_at)
SELECT 
  user_id, 
  -spa_points, 
  'system_reset', 
  'Reset h·ªá th·ªëng SPA - Kh·ªüi t·∫°o l·∫°i t·ª´ 0 ƒëi·ªÉm', 
  NOW()
FROM public.player_rankings 
WHERE spa_points > 0;

-- B∆Ø·ªöC 2: T·∫°o b·∫£ng SPA Milestones
CREATE TABLE IF NOT EXISTS public.spa_milestones (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  milestone_name TEXT NOT NULL,
  milestone_type TEXT NOT NULL, -- 'registration', 'rank_verification', 'referral', 'tournament', 'challenge', 'login_streak', 'achievement'
  requirement_value INTEGER NOT NULL DEFAULT 1,
  spa_reward INTEGER NOT NULL,
  description TEXT,
  icon TEXT DEFAULT 'üèÜ',
  is_active BOOLEAN DEFAULT TRUE,
  is_repeatable BOOLEAN DEFAULT FALSE,
  max_per_day INTEGER DEFAULT NULL, -- Gi·ªõi h·∫°n s·ªë l·∫ßn nh·∫≠n m·ªói ng√†y
  requirement_conditions JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- B∆Ø·ªöC 3: T·∫°o b·∫£ng theo d√µi milestone c·ªßa user
CREATE TABLE IF NOT EXISTS public.user_milestone_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  milestone_id UUID NOT NULL REFERENCES public.spa_milestones(id) ON DELETE CASCADE,
  current_progress INTEGER DEFAULT 0,
  is_completed BOOLEAN DEFAULT FALSE,
  completed_at TIMESTAMP WITH TIME ZONE,
  spa_earned INTEGER DEFAULT 0,
  last_progress_update TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, milestone_id)
);

-- B∆Ø·ªöC 4: T·∫°o b·∫£ng SPA reward history
CREATE TABLE IF NOT EXISTS public.spa_reward_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  milestone_id UUID REFERENCES public.spa_milestones(id),
  spa_amount INTEGER NOT NULL,
  reward_type TEXT NOT NULL, -- 'milestone', 'bonus', 'penalty', 'manual'
  source_description TEXT,
  reference_id UUID, -- ID c·ªßa tournament, challenge, etc.
  reference_type TEXT, -- 'tournament', 'challenge', 'referral', etc.
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- B∆Ø·ªöC 5: Th√™m d·ªØ li·ªáu milestone ban ƒë·∫ßu
INSERT INTO public.spa_milestones (milestone_name, milestone_type, requirement_value, spa_reward, description, icon, is_repeatable, max_per_day) VALUES
-- Milestone ƒëƒÉng k√Ω v√† onboarding
('Ch√†o m·ª´ng th√†nh vi√™n m·ªõi', 'registration', 1, 100, 'T·∫∑ng ngay 100 SPA khi ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng', 'üéâ', false, null),
('X√°c th·ª±c h·∫°ng th√†nh c√¥ng', 'rank_verification', 1, 200, 'Nh·∫≠n 200 SPA khi x√°c th·ª±c h·∫°ng th√†nh c√¥ng', 'üèÖ', false, null),
('Ho√†n th√†nh profile', 'profile_completion', 1, 50, 'Nh·∫≠n 50 SPA khi ho√†n th√†nh ƒë·∫ßy ƒë·ªß th√¥ng tin profile', '‚ú®', false, null),

-- Milestone gi·ªõi thi·ªáu b·∫°n b√®
('Gi·ªõi thi·ªáu b·∫°n b√® th√†nh c√¥ng', 'referral_success', 1, 150, 'Nh·∫≠n 150 SPA khi b·∫°n b√® ƒëƒÉng k√Ω qua link gi·ªõi thi·ªáu v√† x√°c th·ª±c h·∫°ng', 'üë•', true, null),
('Ng∆∞·ªùi ƒë∆∞·ª£c gi·ªõi thi·ªáu', 'referred_user', 1, 100, 'Nh·∫≠n 100 SPA khi ƒëƒÉng k√Ω qua link gi·ªõi thi·ªáu c·ªßa b·∫°n b√®', 'ü§ù', false, null),

-- Milestone ho·∫°t ƒë·ªông h√†ng ng√†y
('ƒêƒÉng nh·∫≠p h√†ng ng√†y', 'daily_login', 1, 10, 'Nh·∫≠n 10 SPA cho m·ªói ng√†y ƒëƒÉng nh·∫≠p', 'üìÖ', true, 1),
('Chu·ªói ƒëƒÉng nh·∫≠p 7 ng√†y', 'login_streak_7', 7, 100, 'Nh·∫≠n 100 SPA khi ƒëƒÉng nh·∫≠p li√™n t·ª•c 7 ng√†y', 'üî•', true, null),
('Chu·ªói ƒëƒÉng nh·∫≠p 30 ng√†y', 'login_streak_30', 30, 500, 'Nh·∫≠n 500 SPA khi ƒëƒÉng nh·∫≠p li√™n t·ª•c 30 ng√†y', 'üåü', true, null),

-- Milestone tournament
('Tham gia tournament ƒë·∫ßu ti√™n', 'first_tournament', 1, 100, 'Nh·∫≠n 100 SPA khi tham gia tournament ƒë·∫ßu ti√™n', 'üèÜ', false, null),
('Th·∫Øng tournament', 'tournament_champion', 1, 300, 'Nh·∫≠n 300 SPA khi v√¥ ƒë·ªãch tournament', 'üëë', true, null),
('Top 3 tournament', 'tournament_top3', 1, 150, 'Nh·∫≠n 150 SPA khi ƒë·∫°t top 3 trong tournament', 'ü•â', true, null),

-- Milestone challenges
('Th√°ch ƒë·∫•u ƒë·∫ßu ti√™n', 'first_challenge', 1, 50, 'Nh·∫≠n 50 SPA khi ho√†n th√†nh th√°ch ƒë·∫•u ƒë·∫ßu ti√™n', '‚öîÔ∏è', false, null),
('Th·∫Øng 10 th√°ch ƒë·∫•u', 'challenge_wins_10', 10, 200, 'Nh·∫≠n 200 SPA khi th·∫Øng 10 th√°ch ƒë·∫•u', 'üí™', false, null),
('Th·∫Øng 50 th√°ch ƒë·∫•u', 'challenge_wins_50', 50, 500, 'Nh·∫≠n 500 SPA khi th·∫Øng 50 th√°ch ƒë·∫•u', 'üèãÔ∏è', false, null),
('Th·∫Øng 100 th√°ch ƒë·∫•u', 'challenge_wins_100', 100, 1000, 'Nh·∫≠n 1000 SPA khi th·∫Øng 100 th√°ch ƒë·∫•u', 'üöÄ', false, null),

-- Milestone th√†nh t√≠ch ƒë·∫∑c bi·ªát
('Chu·ªói th·∫Øng 5 tr·∫≠n', 'win_streak_5', 5, 100, 'Nh·∫≠n 100 SPA khi th·∫Øng li√™n ti·∫øp 5 tr·∫≠n', 'üî•', true, null),
('Chu·ªói th·∫Øng 10 tr·∫≠n', 'win_streak_10', 10, 300, 'Nh·∫≠n 300 SPA khi th·∫Øng li√™n ti·∫øp 10 tr·∫≠n', '‚ö°', true, null),
('ThƒÉng h·∫°ng', 'rank_promotion', 1, 250, 'Nh·∫≠n 250 SPA khi thƒÉng h·∫°ng th√†nh c√¥ng', 'üìà', true, null),

-- Milestone c·ªông ƒë·ªìng
('Tham gia CLB', 'join_club', 1, 75, 'Nh·∫≠n 75 SPA khi tham gia CLB ƒë·∫ßu ti√™n', 'üèõÔ∏è', false, null),
('T·∫°o CLB', 'create_club', 1, 200, 'Nh·∫≠n 200 SPA khi t·∫°o CLB th√†nh c√¥ng', 'üèóÔ∏è', false, null),

-- Milestone ho·∫°t ƒë·ªông ƒë·∫∑c bi·ªát
('Chia s·∫ª th√†nh t√≠ch', 'share_achievement', 1, 25, 'Nh·∫≠n 25 SPA khi chia s·∫ª th√†nh t√≠ch l·∫ßn ƒë·∫ßu', 'üì¢', false, null),
('ƒê√°nh gi√° ·ª©ng d·ª•ng', 'app_review', 1, 100, 'Nh·∫≠n 100 SPA khi ƒë√°nh gi√° ·ª©ng d·ª•ng', '‚≠ê', false, null);

-- B∆Ø·ªöC 6: T·∫°o function ƒë·ªÉ award SPA milestone
CREATE OR REPLACE FUNCTION public.award_spa_milestone(
  p_user_id UUID,
  p_milestone_type TEXT,
  p_progress_increment INTEGER DEFAULT 1,
  p_reference_id UUID DEFAULT NULL,
  p_reference_type TEXT DEFAULT NULL,
  p_metadata JSONB DEFAULT '{}'
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_milestone RECORD;
  v_progress RECORD;
  v_current_spa INTEGER;
  v_new_spa INTEGER;
  v_daily_count INTEGER;
  v_result JSONB;
  v_milestones_completed INTEGER := 0;
BEGIN
  -- L·∫•y th√¥ng tin milestone
  SELECT * INTO v_milestone
  FROM spa_milestones
  WHERE milestone_type = p_milestone_type
    AND is_active = true
  ORDER BY requirement_value ASC
  LIMIT 1;

  IF v_milestone.id IS NULL THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'Milestone not found: ' || p_milestone_type
    );
  END IF;

  -- Ki·ªÉm tra gi·ªõi h·∫°n h√†ng ng√†y n·∫øu c√≥
  IF v_milestone.max_per_day IS NOT NULL THEN
    SELECT COUNT(*) INTO v_daily_count
    FROM spa_reward_history
    WHERE user_id = p_user_id
      AND milestone_id = v_milestone.id
      AND created_at >= CURRENT_DATE
      AND created_at < (CURRENT_DATE + INTERVAL '1 day');

    IF v_daily_count >= v_milestone.max_per_day THEN
      RETURN jsonb_build_object(
        'success', false,
        'error', 'Daily limit reached for milestone: ' || v_milestone.milestone_name
      );
    END IF;
  END IF;

  -- L·∫•y ho·∫∑c t·∫°o progress record
  INSERT INTO user_milestone_progress (user_id, milestone_id, current_progress)
  VALUES (p_user_id, v_milestone.id, 0)
  ON CONFLICT (user_id, milestone_id) 
  DO NOTHING;

  SELECT * INTO v_progress
  FROM user_milestone_progress
  WHERE user_id = p_user_id AND milestone_id = v_milestone.id;

  -- N·∫øu ƒë√£ ho√†n th√†nh v√† kh√¥ng repeatable th√¨ skip
  IF v_progress.is_completed AND NOT v_milestone.is_repeatable THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', 'Milestone already completed: ' || v_milestone.milestone_name
    );
  END IF;

  -- C·∫≠p nh·∫≠t progress
  UPDATE user_milestone_progress
  SET current_progress = current_progress + p_progress_increment,
      last_progress_update = NOW()
  WHERE user_id = p_user_id AND milestone_id = v_milestone.id;

  -- L·∫•y progress m·ªõi
  SELECT * INTO v_progress
  FROM user_milestone_progress
  WHERE user_id = p_user_id AND milestone_id = v_milestone.id;

  -- Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫°t requirement
  IF v_progress.current_progress >= v_milestone.requirement_value THEN
    -- ƒê√°nh d·∫•u ho√†n th√†nh
    UPDATE user_milestone_progress
    SET is_completed = true,
        completed_at = NOW(),
        spa_earned = spa_earned + v_milestone.spa_reward
    WHERE user_id = p_user_id AND milestone_id = v_milestone.id;

    -- C·∫≠p nh·∫≠t SPA points
    SELECT COALESCE(spa_points, 0) INTO v_current_spa
    FROM player_rankings
    WHERE user_id = p_user_id;

    IF v_current_spa IS NULL THEN
      INSERT INTO player_rankings (user_id, spa_points)
      VALUES (p_user_id, v_milestone.spa_reward);
      v_new_spa := v_milestone.spa_reward;
    ELSE
      v_new_spa := v_current_spa + v_milestone.spa_reward;
      UPDATE player_rankings
      SET spa_points = v_new_spa,
          updated_at = NOW()
      WHERE user_id = p_user_id;
    END IF;

    -- Sync v·ªõi wallet
    UPDATE wallets
    SET points_balance = v_new_spa,
        updated_at = NOW()
    WHERE user_id = p_user_id;

    -- T·∫°o SPA log
    INSERT INTO spa_points_log (user_id, points, category, description, reference_id, reference_type)
    VALUES (p_user_id, v_milestone.spa_reward, 'milestone', v_milestone.milestone_name, p_reference_id, p_reference_type);

    -- T·∫°o reward history
    INSERT INTO spa_reward_history (user_id, milestone_id, spa_amount, reward_type, source_description, reference_id, reference_type, metadata)
    VALUES (p_user_id, v_milestone.id, v_milestone.spa_reward, 'milestone', v_milestone.milestone_name, p_reference_id, p_reference_type, p_metadata);

    -- T·∫°o notification
    INSERT INTO notifications (user_id, type, title, message, priority, metadata)
    VALUES (
      p_user_id,
      'milestone_completed',
      'üéâ Milestone ho√†n th√†nh!',
      format('B·∫°n ƒë√£ ho√†n th√†nh "%s" v√† nh·∫≠n ƒë∆∞·ª£c %s SPA!', v_milestone.milestone_name, v_milestone.spa_reward),
      'medium',
      jsonb_build_object(
        'milestone_id', v_milestone.id,
        'spa_reward', v_milestone.spa_reward,
        'milestone_name', v_milestone.milestone_name
      )
    );

    v_milestones_completed := 1;

    -- Reset progress cho repeatable milestones
    IF v_milestone.is_repeatable THEN
      UPDATE user_milestone_progress
      SET current_progress = 0,
          is_completed = false
      WHERE user_id = p_user_id AND milestone_id = v_milestone.id;
    END IF;
  END IF;

  RETURN jsonb_build_object(
    'success', true,
    'milestone_name', v_milestone.milestone_name,
    'current_progress', v_progress.current_progress,
    'requirement_value', v_milestone.requirement_value,
    'milestones_completed', v_milestones_completed,
    'spa_earned', CASE WHEN v_milestones_completed > 0 THEN v_milestone.spa_reward ELSE 0 END,
    'new_total_spa', COALESCE(v_new_spa, v_current_spa)
  );

EXCEPTION
  WHEN OTHERS THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', SQLERRM
    );
END;
$$;

-- B∆Ø·ªöC 7: T·∫°o function ƒë·ªÉ t·∫∑ng SPA bonus ƒë·∫∑c bi·ªát
CREATE OR REPLACE FUNCTION public.award_spa_bonus(
  p_user_id UUID,
  p_amount INTEGER,
  p_bonus_type TEXT,
  p_description TEXT,
  p_reference_id UUID DEFAULT NULL,
  p_reference_type TEXT DEFAULT NULL
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_current_spa INTEGER;
  v_new_spa INTEGER;
BEGIN
  -- L·∫•y SPA hi·ªán t·∫°i
  SELECT COALESCE(spa_points, 0) INTO v_current_spa
  FROM player_rankings
  WHERE user_id = p_user_id;

  IF v_current_spa IS NULL THEN
    INSERT INTO player_rankings (user_id, spa_points)
    VALUES (p_user_id, p_amount);
    v_new_spa := p_amount;
  ELSE
    v_new_spa := v_current_spa + p_amount;
    UPDATE player_rankings
    SET spa_points = v_new_spa,
        updated_at = NOW()
    WHERE user_id = p_user_id;
  END IF;

  -- Sync v·ªõi wallet
  UPDATE wallets
  SET points_balance = v_new_spa,
      updated_at = NOW()
  WHERE user_id = p_user_id;

  -- T·∫°o log
  INSERT INTO spa_points_log (user_id, points, category, description, reference_id, reference_type)
  VALUES (p_user_id, p_amount, p_bonus_type, p_description, p_reference_id, p_reference_type);

  -- T·∫°o reward history
  INSERT INTO spa_reward_history (user_id, spa_amount, reward_type, source_description, reference_id, reference_type)
  VALUES (p_user_id, p_amount, 'bonus', p_description, p_reference_id, p_reference_type);

  -- T·∫°o notification n·∫øu l√† bonus l·ªõn
  IF p_amount >= 50 THEN
    INSERT INTO notifications (user_id, type, title, message, priority)
    VALUES (
      p_user_id,
      'spa_bonus',
      'üí∞ Nh·∫≠n th∆∞·ªüng SPA!',
      format('B·∫°n nh·∫≠n ƒë∆∞·ª£c %s SPA t·ª´ %s', p_amount, p_description),
      'medium'
    );
  END IF;

  RETURN jsonb_build_object(
    'success', true,
    'spa_awarded', p_amount,
    'previous_spa', v_current_spa,
    'new_total_spa', v_new_spa,
    'bonus_type', p_bonus_type,
    'description', p_description
  );

EXCEPTION
  WHEN OTHERS THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', SQLERRM
    );
END;
$$;

-- B∆Ø·ªöC 8: C·∫≠p nh·∫≠t trigger ƒë·ªÉ auto-award milestone khi user ƒëƒÉng k√Ω
CREATE OR REPLACE FUNCTION public.handle_new_user_spa_milestones()
RETURNS TRIGGER AS $$
BEGIN
  -- Generate referral code n·∫øu ch∆∞a c√≥
  IF NEW.my_referral_code IS NULL THEN
    NEW.my_referral_code := public.generate_referral_code(NEW.user_id);
  END IF;

  -- Award milestone ƒëƒÉng k√Ω (thay th·∫ø cho old signup bonus)
  PERFORM public.award_spa_milestone(
    NEW.user_id,
    'registration',
    1,
    NEW.user_id,
    'user_registration'
  );

  -- N·∫øu ƒë∆∞·ª£c gi·ªõi thi·ªáu, award milestone referred_user
  IF NEW.referred_by_code IS NOT NULL THEN
    PERFORM public.award_spa_milestone(
      NEW.user_id,
      'referred_user',
      1,
      NEW.user_id,
      'referral'
    );

    -- T·∫°o referral record
    INSERT INTO public.referrals (
      referrer_id,
      referred_id,
      referral_code
    )
    SELECT 
      p.user_id,
      NEW.user_id,
      NEW.referred_by_code
    FROM public.profiles p
    WHERE p.my_referral_code = NEW.referred_by_code;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

-- C·∫≠p nh·∫≠t trigger
DROP TRIGGER IF EXISTS on_user_signup_spa_milestones ON public.profiles;
CREATE TRIGGER on_user_signup_spa_milestones
  BEFORE INSERT ON public.profiles
  FOR EACH ROW
  EXECUTE FUNCTION public.handle_new_user_spa_milestones();

-- B∆Ø·ªöC 9: C·∫≠p nh·∫≠t trigger referral completion
CREATE OR REPLACE FUNCTION public.complete_referral_spa_milestone()
RETURNS TRIGGER AS $$
DECLARE
  v_referral RECORD;
BEGIN
  -- Ki·ªÉm tra n·∫øu rank v·ª´a ƒë∆∞·ª£c verify
  IF NEW.verified_at IS NOT NULL AND OLD.verified_at IS NULL THEN
    
    -- Award milestone rank verification
    PERFORM public.award_spa_milestone(
      NEW.user_id,
      'rank_verification',
      1,
      NEW.id,
      'rank_verification'
    );

    -- T√¨m ng∆∞·ªùi gi·ªõi thi·ªáu v√† award milestone
    SELECT * INTO v_referral
    FROM public.referrals
    WHERE referred_id = NEW.user_id
      AND status = 'pending';

    IF v_referral.id IS NOT NULL THEN
      -- C·∫≠p nh·∫≠t status referral
      UPDATE public.referrals
      SET status = 'completed',
          completed_at = NOW()
      WHERE id = v_referral.id;

      -- Award milestone cho ng∆∞·ªùi gi·ªõi thi·ªáu
      PERFORM public.award_spa_milestone(
        v_referral.referrer_id,
        'referral_success',
        1,
        v_referral.id,
        'referral'
      );
    END IF;
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

-- C·∫≠p nh·∫≠t trigger cho rank verification
DROP TRIGGER IF EXISTS on_rank_verification_spa_milestone ON public.rank_verifications;
CREATE TRIGGER on_rank_verification_spa_milestone
  AFTER UPDATE ON public.rank_verifications
  FOR EACH ROW
  EXECUTE FUNCTION public.complete_referral_spa_milestone();

-- B∆Ø·ªöC 10: T·∫°o RLS policies
ALTER TABLE public.spa_milestones ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Anyone can view milestones" ON public.spa_milestones FOR SELECT USING (true);
CREATE POLICY "Only admins can manage milestones" ON public.spa_milestones FOR ALL USING (
  EXISTS (SELECT 1 FROM public.profiles WHERE user_id = auth.uid() AND is_admin = true)
);

ALTER TABLE public.user_milestone_progress ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own milestone progress" ON public.user_milestone_progress
FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "System can manage milestone progress" ON public.user_milestone_progress
FOR ALL USING (true);

ALTER TABLE public.spa_reward_history ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own reward history" ON public.spa_reward_history
FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "System can insert reward history" ON public.spa_reward_history
FOR INSERT WITH CHECK (true);

-- B∆Ø·ªöC 11: T·∫°o function ƒë·ªÉ get milestone progress c·ªßa user
CREATE OR REPLACE FUNCTION public.get_user_milestone_progress(p_user_id UUID)
RETURNS TABLE (
  milestone_id UUID,
  milestone_name TEXT,
  milestone_type TEXT,
  description TEXT,
  icon TEXT,
  requirement_value INTEGER,
  current_progress INTEGER,
  spa_reward INTEGER,
  is_completed BOOLEAN,
  is_repeatable BOOLEAN,
  completed_at TIMESTAMP WITH TIME ZONE
)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    m.id,
    m.milestone_name,
    m.milestone_type,
    m.description,
    m.icon,
    m.requirement_value,
    COALESCE(p.current_progress, 0),
    m.spa_reward,
    COALESCE(p.is_completed, false),
    m.is_repeatable,
    p.completed_at
  FROM spa_milestones m
  LEFT JOIN user_milestone_progress p ON m.id = p.milestone_id AND p.user_id = p_user_id
  WHERE m.is_active = true
  ORDER BY m.milestone_type, m.requirement_value;
END;
$$;

-- B∆Ø·ªöC 12: T·∫°o function ƒë·ªÉ award daily login
CREATE OR REPLACE FUNCTION public.award_daily_login_milestone(p_user_id UUID)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_today_login BOOLEAN;
  v_result JSONB;
BEGIN
  -- Ki·ªÉm tra ƒë√£ ƒëƒÉng nh·∫≠p h√¥m nay ch∆∞a
  SELECT EXISTS(
    SELECT 1 FROM spa_reward_history 
    WHERE user_id = p_user_id 
      AND reward_type = 'milestone'
      AND source_description = 'ƒêƒÉng nh·∫≠p h√†ng ng√†y'
      AND created_at >= CURRENT_DATE
      AND created_at < (CURRENT_DATE + INTERVAL '1 day')
  ) INTO v_today_login;

  IF NOT v_today_login THEN
    -- Award daily login milestone
    SELECT public.award_spa_milestone(
      p_user_id,
      'daily_login',
      1,
      NULL,
      'daily_login'
    ) INTO v_result;
    
    RETURN v_result;
  END IF;

  RETURN jsonb_build_object(
    'success', false,
    'error', 'Already logged in today'
  );
END;
$$;

-- B∆Ø·ªöC 13: Insert d·ªØ li·ªáu cho existing users ƒë·ªÉ tr√°nh miss milestone
DO $$
DECLARE
  user_record RECORD;
BEGIN
  -- Award registration milestone cho t·∫•t c·∫£ user hi·ªán t·∫°i
  FOR user_record IN 
    SELECT user_id FROM public.profiles
  LOOP
    PERFORM public.award_spa_milestone(
      user_record.user_id,
      'registration',
      1,
      user_record.user_id,
      'retroactive_registration'
    );
  END LOOP;
  
  RAISE NOTICE 'Completed retroactive milestone awards for existing users';
END;
$$;

-- B∆Ø·ªöC 14: T·∫°o index ƒë·ªÉ t·ªëi ∆∞u performance
CREATE INDEX IF NOT EXISTS idx_user_milestone_progress_user_id ON user_milestone_progress(user_id);
CREATE INDEX IF NOT EXISTS idx_user_milestone_progress_milestone_id ON user_milestone_progress(milestone_id);
CREATE INDEX IF NOT EXISTS idx_spa_reward_history_user_id ON spa_reward_history(user_id);
CREATE INDEX IF NOT EXISTS idx_spa_reward_history_created_at ON spa_reward_history(created_at);
CREATE INDEX IF NOT EXISTS idx_spa_milestones_type ON spa_milestones(milestone_type);

-- HO√ÄN TH√ÄNH MIGRATION
-- Log ho√†n th√†nh
INSERT INTO public.spa_points_log (user_id, points, category, description, created_at)
SELECT 
  '00000000-0000-0000-0000-000000000000'::UUID,
  0, 
  'system_migration', 
  'Ho√†n th√†nh migration: Reset SPA system v√† t·∫°o milestone system m·ªõi', 
  NOW();

-- Comment summary
COMMENT ON TABLE public.spa_milestones IS 'B·∫£ng ƒë·ªãnh nghƒ©a c√°c milestone SPA c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c';
COMMENT ON TABLE public.user_milestone_progress IS 'B·∫£ng theo d√µi ti·∫øn ƒë·ªô milestone c·ªßa t·ª´ng user';
COMMENT ON TABLE public.spa_reward_history IS 'B·∫£ng l·ªãch s·ª≠ nh·∫≠n th∆∞·ªüng SPA t·ª´ milestones v√† bonuses';
COMMENT ON FUNCTION public.award_spa_milestone IS 'Function t·ª± ƒë·ªông t·∫∑ng SPA khi user ƒë·∫°t milestone';
COMMENT ON FUNCTION public.award_spa_bonus IS 'Function t·∫∑ng SPA bonus ƒë·∫∑c bi·ªát';
